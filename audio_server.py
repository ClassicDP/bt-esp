#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP32
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CVSD –∏ mSBC –∫–æ–¥–µ–∫–∏
"""

import socket
import threading
import struct
import time
import queue
import pyaudio
import wave
import argparse
import sys
import numpy as np
import subprocess
import tempfile
import os

class CVSDDecoder:
    """CVSD (Continuously Variable Slope Delta) –¥–µ–∫–æ–¥–µ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è HFP"""

    def __init__(self):
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã CVSD —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Bluetooth HFP
        self.step_size = 8.0       # –ï—â–µ –º–µ–Ω—å—à–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
        self.min_step = 2.0        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥
        self.max_step = 128.0      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥
        self.step_adaptation = 1.1 # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        self.integrator = 0.0      # –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è CVSD

        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        self.history = [0.0] * 8
        self.history_index = 0

        # –°—á–µ—Ç—á–∏–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±–∏—Ç–æ–≤ –¥–ª—è slope overload
        self.same_bit_count = 0
        self.last_bit = None

    def _apply_filter(self, sample):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π FIR —Ñ–∏–ª—å—Ç—Ä –Ω–∏–∑–∫–∏—Ö —á–∞—Å—Ç–æ—Ç"""
        self.history[self.history_index] = sample
        self.history_index = (self.history_index + 1) % len(self.history)

        # –ü—Ä–æ—Å—Ç–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å –≤–µ—Å–∞–º–∏ (–Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)
        filtered = 0.0
        weights = [0.2, 0.15, 0.15, 0.1, 0.1, 0.1, 0.1, 0.1]
        for i, weight in enumerate(weights):
            idx = (self.history_index - 1 - i) % len(self.history)
            filtered += self.history[idx] * weight

        return filtered

    def decode(self, encoded_data):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ CVSD –¥–∞–Ω–Ω—ã—Ö –≤ PCM —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è HFP"""
        if not encoded_data:
            return b''

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∏—Ç—ã - –ø–æ–ø—Ä–æ–±—É–µ–º LSB first (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        bits = []
        for byte in encoded_data:
            for i in range(8):
                bits.append((byte >> i) & 1)

        output_samples = []

        for bit in bits:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±–∏—Ç—ã –¥–ª—è slope overload detection
            if self.last_bit is not None and bit == self.last_bit:
                self.same_bit_count += 1
            else:
                self.same_bit_count = 0
            self.last_bit = bit

            # CVSD –∞–ª–≥–æ—Ä–∏—Ç–º: –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä + –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —à–∞–≥
            if bit == 1:
                self.integrator += self.step_size
            else:
                self.integrator -= self.step_size

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
            self.integrator = max(-8192, min(8192, self.integrator))

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∏–∑–∫–∏—Ö —á–∞—Å—Ç–æ—Ç
            filtered_output = self._apply_filter(self.integrator)

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ slope overload
            if self.same_bit_count >= 3:  # Slope overload detected
                self.step_size = min(self.max_step, self.step_size * self.step_adaptation)
            else:
                self.step_size = max(self.min_step, self.step_size / self.step_adaptation)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 16-–±–∏—Ç–Ω—ã–π —Å—ç–º–ø–ª
            sample = int(filtered_output)
            sample = max(-32767, min(32767, sample))
            output_samples.append(sample)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        return struct.pack('<' + 'h' * len(output_samples), *output_samples)


class MSBCDecoder:
    """mSBC (modified SBC) –¥–µ–∫–æ–¥–µ—Ä —á–µ—Ä–µ–∑ FFmpeg"""

    def __init__(self):
        self.ffmpeg_available = self._check_ffmpeg()
        self.buffer = b''

    def _check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg"""
        try:
            result = subprocess.run(['ffmpeg', '-version'],
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except Exception:
            return False

    def decode(self, encoded_data):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ mSBC –¥–∞–Ω–Ω—ã—Ö –≤ PCM —á–µ—Ä–µ–∑ FFmpeg"""
        if not self.ffmpeg_available:
            print("‚ö†Ô∏è FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è mSBC")
            return None

        if not encoded_data:
            return b''

        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ
        self.buffer += encoded_data

        # mSBC —Ñ—Ä–µ–π–º—ã –æ–±—ã—á–Ω–æ 57 –±–∞–π—Ç, –Ω–æ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if len(self.buffer) < 114:  # –ú–∏–Ω–∏–º—É–º 2 —Ñ—Ä–µ–π–º–∞
            return b''

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.NamedTemporaryFile(suffix='.sbc', delete=False) as input_file:
                input_file.write(self.buffer)
                input_path = input_file.name

            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as output_file:
                output_path = output_file.name

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ FFmpeg
            cmd = [
                'ffmpeg', '-y', '-f', 'sbc', '-i', input_path,
                '-f', 's16le', '-ar', '16000', '-ac', '1', output_path
            ]

            result = subprocess.run(cmd, capture_output=True, timeout=2)

            if result.returncode == 0:
                # –ß–∏—Ç–∞–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                with open(output_path, 'rb') as f:
                    decoded_data = f.read()

                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                self.buffer = b''
                return decoded_data
            else:
                # –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º —á–∞—Å—Ç—å –±—É—Ñ–µ—Ä–∞
                self.buffer = self.buffer[57:]  # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ñ—Ä–µ–π–º
                return b''

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è mSBC: {e}")
            self.buffer = b''
            return b''
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.unlink(input_path)
                os.unlink(output_path)
            except:
                pass


class AudioServer:
    def __init__(self, host='0.0.0.0', port=8888):
        self.host = host
        self.port = port
        self.socket = None
        self.running = False
        self.audio = None
        self.stream = None
        self.audio_queue = queue.Queue(maxsize=200)
        self.playback_thread = None
        self.current_client = None
        self.client_lock = threading.Lock()

        # –î–µ–∫–æ–¥–µ—Ä—ã
        self.cvsd_decoder = CVSDDecoder()
        self.msbc_decoder = MSBCDecoder()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.sample_rate = 8000
        self.channels = 1
        self.bits_per_sample = 16
        self.chunk_size = 512  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PyAudio
            self.audio = pyaudio.PyAudio()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.bind((self.host, self.port))
            self.socket.listen(1)

            print(f"üéµ –ê—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            print("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ESP32...")

            self.running = True

            while self.running:
                try:
                    client_socket, address = self.socket.accept()
                    print(f"üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {address}")

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    client_thread = threading.Thread(
                        target=self.handle_client,
                        args=(client_socket, address)
                    )
                    client_thread.daemon = True
                    client_thread.start()

                except socket.error as e:
                    if self.running:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.cleanup()

    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = self.read_header(client_socket)
            if header:
                self.parse_header(header)
                print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ: {self.sample_rate}Hz, {self.channels}ch, {self.bits_per_sample}bit")

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                self.init_audio_stream()

                with self.client_lock:
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                    if self.current_client and self.current_client != client_socket:
                        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
                        self.current_client.close()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    self.current_client = client_socket

                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                if not self.playback_thread or not self.playback_thread.is_alive():
                    self.playback_thread = threading.Thread(target=self.audio_playback_thread)
                    self.playback_thread.daemon = True
                    self.playback_thread.start()

                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
                self.receive_audio_data(client_socket)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {address}: {e}")
        finally:
            with self.client_lock:
                if client_socket == self.current_client:
                    self.current_client = None
            client_socket.close()
            print(f"üì± –û—Ç–∫–ª—é—á–µ–Ω–∏–µ {address}")

    def read_header(self, client_socket):
        """–ß—Ç–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ—Ç–æ–∫–∞"""
        try:
            header = b""
            while b"\n\n" not in header:
                data = client_socket.recv(1)
                if not data:
                    return None
                header += data

                # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if len(header) > 1024:
                    print("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
                    return None

            return header.decode('utf-8')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return None

    def parse_header(self, header):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞—É–¥–∏–æ"""
        lines = header.strip().split('\n')

        for line in lines:
            if '=' in line:
                key, value = line.split('=', 1)
                if key == 'sample_rate':
                    self.sample_rate = int(value)
                elif key == 'channels':
                    self.channels = int(value)
                elif key == 'bits_per_sample':
                    self.bits_per_sample = int(value)
                elif key == 'codec':
                    self.codec_type = value

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        if hasattr(self, 'codec_type'):
            if self.codec_type.upper() == 'MSBC':
                print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω mSBC –∫–æ–¥–µ–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                self.is_msbc = True
                self.sample_rate = 16000  # mSBC –≤—Å–µ–≥–¥–∞ 16 –∫–ì—Ü
            else:
                print(f"üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥–µ–∫ {self.codec_type}")
                self.is_msbc = False
        else:
            # –§–æ–ª–±—ç–∫: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            if self.sample_rate == 16000:
                print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω mSBC –∫–æ–¥–µ–∫ (16 –∫–ì—Ü)")
                self.is_msbc = True
            else:
                print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω CVSD –∫–æ–¥–µ–∫ (8 –∫–ì—Ü)")
                self.is_msbc = False

    def init_audio_stream(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            if self.stream:
                self.stream.close()

            format_map = {
                8: pyaudio.paInt8,
                16: pyaudio.paInt16,
                24: pyaudio.paInt24,
                32: pyaudio.paInt32
            }

            audio_format = format_map.get(self.bits_per_sample, pyaudio.paInt16)

            self.stream = self.audio.open(
                format=audio_format,
                channels=self.channels,
                rate=self.sample_rate,
                output=True,
                frames_per_buffer=self.chunk_size
            )

            print("üîä –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {e}")

    def receive_audio_data(self, client_socket):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        print("üé§ –ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∞ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö...")
        dropped_packets = 0
        total_packets = 0

        while self.running:
            try:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = client_socket.recv(4096)
                if not data:
                    print("üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º")
                    break

                total_packets += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                processed_data = self.process_audio_data(data)
                if processed_data is None:
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                try:
                    self.audio_queue.put_nowait(processed_data)
                except queue.Full:
                    # –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
                    cleared = 0
                    try:
                        # –û—á–∏—â–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Å—Ä–∞–∑—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
                        while cleared < 10 and not self.audio_queue.empty():
                            self.audio_queue.get_nowait()
                            cleared += 1

                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç
                        self.audio_queue.put_nowait(processed_data)
                        dropped_packets += 1

                        # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 100 —Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
                        if dropped_packets % 100 == 0:
                            drop_rate = (dropped_packets / total_packets) * 100
                            print(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞: —Å–±—Ä–æ—à–µ–Ω–æ {dropped_packets} –∏–∑ {total_packets} –ø–∞–∫–µ—Ç–æ–≤ ({drop_rate:.1f}%)")
                    except queue.Empty:
                        # –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç
                        try:
                            self.audio_queue.put_nowait(processed_data)
                        except queue.Full:
                            # –í—Å–µ –µ—â–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞–∫–µ—Ç
                            dropped_packets += 1

            except socket.timeout:
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                break

    def process_audio_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # ESP32 —Å CONFIG_BT_HFP_AUDIO_DATA_PATH_HCI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–∂–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PCM –¥–∞–Ω–Ω—ã–µ
            # –ù–µ –Ω—É–∂–Ω–æ –∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ CVSD –∏–ª–∏ mSBC

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∞—Ç–µ–Ω —Ä–∞–∑–º–µ—Ä—É —Å—ç–º–ø–ª–∞ (16-bit mono = 2 –±–∞–π—Ç–∞)
            sample_size = 2  # 16-bit mono
            if len(data) % sample_size != 0:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                trimmed_size = (len(data) // sample_size) * sample_size
                data = data[:trimmed_size]
                if trimmed_size == 0:
                    return None

            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ 16-–±–∏—Ç–Ω—ã–µ signed integers
            audio_array = np.frombuffer(data, dtype=np.int16)

            if len(audio_array) > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 100 –ø–∞–∫–µ—Ç–æ–≤
                if not hasattr(self, 'packet_counter'):
                    self.packet_counter = 0
                self.packet_counter += 1

                if self.packet_counter % 100 == 1:  # –ü–µ—Ä–≤—ã–π –∏ –∫–∞–∂–¥—ã–π 100-–π –ø–∞–∫–µ—Ç
                    max_val = np.max(np.abs(audio_array))
                    avg_val = np.mean(np.abs(audio_array))
                    rms_val = np.sqrt(np.mean(audio_array.astype(np.float32) ** 2))
                    codec_type = "mSBC" if self.sample_rate == 16000 else "CVSD"
                    print(f"üîä {codec_type} –ø–∞–∫–µ—Ç #{self.packet_counter}: —Å—ç–º–ø–ª—ã={len(audio_array)}, –º–∞–∫—Å={max_val}, —Å—Ä–µ–¥={avg_val:.1f}, RMS={rms_val:.1f}")

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Å–ª—ã—à–∏–º–æ—Å—Ç–∏
                audio_array = np.clip(audio_array * 2, -32768, 32767).astype(np.int16)
                return audio_array.tobytes()
            else:
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def audio_playback_thread(self):
        """–ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        print("üîä –ü–æ—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")

        while self.running:
            try:
                with self.client_lock:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –∂–¥–µ–º
                    if not self.current_client:
                        time.sleep(0.1)
                        continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                audio_data = self.audio_queue.get(timeout=1.0)

                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                if self.stream:
                    self.stream.write(audio_data)

            except queue.Empty:
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                time.sleep(0.1)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        self.running = False

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()

        if self.audio:
            self.audio.terminate()

        if self.socket:
            self.socket.close()

        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    parser = argparse.ArgumentParser(description='–ê—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä –¥–ª—è ESP32')
    parser.add_argument('--host', default='0.0.0.0', help='IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--port', type=int, default=8888, help='–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞')

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PyAudio
    try:
        import pyaudio
    except ImportError:
        print("‚ùå PyAudio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyaudio")
        sys.exit(1)

    server = AudioServer(args.host, args.port)

    try:
        server.start()
    except KeyboardInterrupt:
        server.stop()

if __name__ == '__main__':
    main()
